import math

def reward_function(params):
    '''
    Gangjjang5's Object ver. Reward function
    '''
    
    # Read input parameters
    speed =params['speed']
    distance_from_center = params['distance_from_center']
    track_width = params['track_width']
    waypoints = params['waypoints']
    closest_waypoints = params['closest_waypoints']
    heading = params['heading']
    is_offtrack = params['is_offtrack']
    is_left_of_center = params['is_left_of_center']
    all_wheels_on_track = params['all_wheels_on_track']
    distance_from_center = params['distance_from_center']
    objects_distance = params['objects_distance']
    _, next_object_index = params['closest_objects']
    objects_left_of_center = params['objects_left_of_center']

    # Initialize reward with a small number but not zero
    # because zero means off-track or crashed
    reward = 1e-3

    # Reward if the agent stays inside the two borders of the track
    if all_wheels_on_track and (0.5 * track_width - distance_from_center) >= 0.05:
        reward_lane = 1.0
    else:
        reward_lane = 1e-3

    # Penalize if the agent is too close to the next object
    reward_avoid = 1.0

    # Distance to the next object
    distance_closest_object = objects_distance[next_object_index]
    # Decide if the agent and the next object is on the same lane
    is_same_lane = objects_left_of_center[next_object_index] == is_left_of_center

    if is_same_lane:
        if 0.5 <= distance_closest_object < 0.8: 
            reward_avoid *= 0.5
        elif 0.3 <= distance_closest_object < 0.5:
            reward_avoid *= 0.2
        elif distance_closest_object < 0.3:
            reward_avoid = 1e-3 # Likely crashed

    # Calculate reward by putting different weights on 
    # the two aspects above
    reward += 1.0 * reward_lane + 4.0 * reward_avoid
    
    # speed reward
    if speed > 3 :
        reward_speed = 10
    elif speed > 2 :
        reward_speed = 8
    else :
        reward_speed = 1
    
    # distance_from_center reward
    # 이탈 시 패널티를 주는 방식으로 구성
    if distance_from_center > track_width * 0.5 :
        reward_distance_from_center = 0.7
    else :
        reward_distance_from_center = 1
        
    # direction reward
    next_point = waypoints[closest_waypoints[1]]
    prev_point = waypoints[closest_waypoints[0]]
    
    track_direction = math.atan2(next_point[1] - prev_point[1], next_point[0] - prev_point[0])
    track_direction = math.degrees(track_direction)
    
    direction_diff = abs(track_direction - heading)
    
    if direction_diff > 180 :
        direction_diff = 360 - direction_diff
        
    if direction_diff <= 10 :
        reward_direction = 5
    elif direction_diff <= 30 :
        reward_direction = 3
    elif direction_diff <= 45 :
        reward_direction = 1
    else :
        reward_direction = 0.1
        
    # offtrack reward
    # 트랙을 벗어나면 패널티 부여
    if is_offtrack :
        reward_offtrack = 0.001
    else :
        reward_offtrack = 1
        
    # direction_change reward
    # 방향 전환 시, 핸들을 꺾는 쪽 도로에 있으면 보상 부여
    next_point = waypoints[closest_waypoints[1]]
    prev_point = waypoints[closest_waypoints[0]]
    
    track_direction = math.atan2(next_point[1] - prev_point[1], next_point[0] - prev_point[0])
    track_direction = math.degrees(track_direction)
    
    if track_direction > 0 :
        # 좌회전
        if is_left_of_center :
            reward_direction_change = 10
        else :
            reward_direction_change = 0.01
    elif track_direction < 0 :
        # 우회전
        if is_left_of_center :
            reward_direction_change = 0.01
        else :
            reward_direction_change = 10
    else :
        # 직진
        reward_direction_change = 10
        
    return float(reward * reward_speed * reward_distance_from_center * reward_direction * reward_offtrack * reward_direction_change)
